<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">
<pdf2xml producer="poppler" version="23.04.0">
<page number="1" position="absolute" top="0" left="0" height="792" width="612">
	<fontspec id="font0" size="9" family="Arial,Italic" color="#000000"/>
	<fontspec id="font1" size="9" family="Arial" color="#000000"/>
	<fontspec id="font2" size="9" family="Arial,Bold" color="#000000"/>
	<fontspec id="font3" size="7" family="Arial,Italic" color="#000000"/>
	<fontspec id="font4" size="10" family="Giovanni-Book" color="#000000"/>
	<fontspec id="font5" size="10" family="Mathematica5" color="#000000"/>
	<fontspec id="font6" size="10" family="Giovanni-BookItalic,Italic" color="#000000"/>
	<fontspec id="font7" size="10" family="SymbolMT" color="#000000"/>
	<fontspec id="font8" size="7" family="Giovanni-BookItalic,Italic" color="#000000"/>
	<fontspec id="font9" size="7" family="Giovanni-Book" color="#000000"/>
	<fontspec id="font10" size="10" family="Giovanni,Bold" color="#000000"/>
	<fontspec id="font11" size="8" family="Mathematica5" color="#000000"/>
	<fontspec id="font12" size="10" family="GillSans" color="#ffffff"/>
	<fontspec id="font13" size="10" family="GillSans,Bold" color="#000000"/>
	<fontspec id="font14" size="10" family="GillSans" color="#000000"/>
	<fontspec id="font15" size="16" family="CMBX10,Bold" color="#000000"/>
	<fontspec id="font16" size="16" family="CMR10" color="#000000"/>
	<fontspec id="font17" size="16" family="CMMI10,Italic" color="#000000"/>
	<fontspec id="font18" size="16" family="CMSY10,Italic" color="#000000"/>
	<fontspec id="font19" size="11" family="CMBX7,Bold" color="#000000"/>
	<fontspec id="font20" size="16" family="CMTI10,Italic" color="#000000"/>
	<fontspec id="font21" size="11" family="CMSY7,Italic" color="#000000"/>
	<fontspec id="font22" size="11" family="CMMI7,Italic" color="#000000"/>
<text top="41" left="55" width="173" height="10" font="font0" id="p1_t1" reading_order_no="0" segment_no="0" tag_type="title">Algorithms for Molecular Biology 2006, 1 :21<i>Algorithms for Molecular Biology</i></text>
<text top="41" left="410" width="144" height="10" font="font1" id="p1_t2" reading_order_no="1" segment_no="1" tag_type="text">http://www.almob.org/content/1/1/21</text>
<text top="756" left="503" width="51" height="10" font="font1" id="p1_t3" reading_order_no="85" segment_no="9" tag_type="text">Page 6 of 18<b>1</b></text>
<text top="769" left="432" width="122" height="8" font="font3" id="p1_t4" reading_order_no="86" segment_no="10" tag_type="text">(page number not for citation purposes)</text>
<text top="90" left="55" width="241" height="10" font="font4" id="p1_t5" reading_order_no="2" segment_no="3" tag_type="text">For each suffix of a structured motif,  , starting at posi-</text>
<text top="105" left="55" width="241" height="14" font="font4" id="p1_t6" reading_order_no="3" segment_no="3" tag_type="text">tion i with 1 ≤ i ≤ |  |, we keep its pos-list,  i , and an</text>
<text top="125" left="55" width="242" height="11" font="font4" id="p1_t7" reading_order_no="4" segment_no="3" tag_type="text">index list,  i . For each entry, say  i [ j ], in the pos-list  i ,<i>(page number not for citation purposes)</i></text>
<text top="142" left="55" width="241" height="11" font="font4" id="p1_t8" reading_order_no="5" segment_no="3" tag_type="text">the corresponding index entry  i [ j ], points to the first</text>
<text top="159" left="55" width="241" height="11" font="font4" id="p1_t9" reading_order_no="6" segment_no="3" tag_type="text">entry, say f , in  i +1 that satisfies the gap range with respect</text>
<text top="174" left="55" width="205" height="13" font="font4" id="p1_t10" reading_order_no="7" segment_no="3" tag_type="text">to  i [ j ], i.e.,  i +1 [ f ] -  i [ j ] - 1 ∈ [ l i , u i ]. Note that</text>
<text top="177" left="287" width="9" height="9" font="font4" id="p1_t11" reading_order_no="9" segment_no="3" tag_type="text">is</text>
<text top="198" left="55" width="241" height="11" font="font4" id="p1_t12" reading_order_no="10" segment_no="3" tag_type="text">never used. Also note that  (  ) =  1 . Let s be a start posi-<i>i </i></text>
<text top="214" left="55" width="242" height="9" font="font4" id="p1_t13" reading_order_no="11" segment_no="3" tag_type="text">tion for the structured motif in sequence S , and let s be the</text>
<text top="228" left="55" width="241" height="12" font="font6" id="p1_t14" reading_order_no="12" segment_no="3" tag_type="text">j s -th entry in  1 , i.e., s =  1 [ j s ]. Let F store a full position</text>
<text top="246" left="55" width="242" height="10" font="font4" id="p1_t15" reading_order_no="13" segment_no="3" tag_type="text">starting from s , and let  store the set of all full positions.<i>i </i></text>
<text top="261" left="55" width="241" height="9" font="font4" id="p1_t16" reading_order_no="14" segment_no="3" tag_type="text">Figure 2 shows the pseudo-code for recovering full posi-</text>
<text top="275" left="55" width="241" height="9" font="font4" id="p1_t17" reading_order_no="15" segment_no="3" tag_type="text">tions starting from s . This recursive algorithm has four</text>
<text top="289" left="55" width="241" height="10" font="font4" id="p1_t18" reading_order_no="16" segment_no="3" tag_type="text">parameters: i denotes a (suffix) position in  , j gives the</text>
<text top="306" left="55" width="241" height="12" font="font6" id="p1_t19" reading_order_no="17" segment_no="3" tag_type="text">j -th entry in  i , F denotes an intermediate full position,</text>
<text top="324" left="55" width="241" height="10" font="font4" id="p1_t20" reading_order_no="18" segment_no="3" tag_type="text">and  denotes the set of all the full occurrences. The algo-</text>
<text top="341" left="55" width="241" height="11" font="font4" id="p1_t21" reading_order_no="19" segment_no="3" tag_type="text">rithm is initially called with i = 2, j =  1 [ j s ], F = { s }, and<i>i</i></text>
<text top="356" left="55" width="241" height="13" font="font5" id="p1_t22" reading_order_no="20" segment_no="3" tag_type="text"> = ∅ . Starting at the first index in P i , that satisfies the gap</text>
<text top="374" left="55" width="241" height="9" font="font4" id="p1_t23" reading_order_no="21" segment_no="3" tag_type="text">range with respect to the last position in F , we continue to</text>
<text top="385" left="55" width="241" height="14" font="font4" id="p1_t24" reading_order_no="22" segment_no="3" tag_type="text">compute all such positions j ' ∈ [ j , | P i |] that satisfy the gap</text>
<text top="403" left="55" width="241" height="9" font="font4" id="p1_t25" reading_order_no="23" segment_no="3" tag_type="text">range (line 3).  That is, we find all positions j ', such that<i>i</i></text>
<text top="414" left="55" width="241" height="14" font="font6" id="p1_t26" reading_order_no="24" segment_no="3" tag_type="text">P i [ j '] - F [ i - 1] - 1 = d ∈ [ l i , u i ]. For each such position j ', we</text>
<text top="432" left="55" width="241" height="9" font="font4" id="p1_t27" reading_order_no="25" segment_no="3" tag_type="text">add it in turn to the intermediate full position, and make</text>
<text top="445" left="55" width="241" height="9" font="font4" id="p1_t28" reading_order_no="26" segment_no="3" tag_type="text">another recursive call (line 5), passing the first index posi-<i>i</i></text>
<text top="458" left="55" width="241" height="11" font="font4" id="p1_t29" reading_order_no="27" segment_no="3" tag_type="text">tion N i [ j '] in P i +1 that can satisfy the gap range with respect</text>
<text top="473" left="55" width="241" height="11" font="font4" id="p1_t30" reading_order_no="28" segment_no="3" tag_type="text">to P i [ j ']. Thus in each call we keep following the indices<i>j</i></text>
<text top="488" left="55" width="241" height="9" font="font4" id="p1_t31" reading_order_no="29" segment_no="3" tag_type="text">from one pos-list to the next, to finally obtain a full posi-</text>
<text top="502" left="55" width="216" height="9" font="font4" id="p1_t32" reading_order_no="30" segment_no="3" tag_type="text">tion starting from s when we reach the last pos-list,</text>
<text top="502" left="294" width="3" height="9" font="font4" id="p1_t33" reading_order_no="32" segment_no="5" tag_type="text">.<i>i</i></text>
<text top="89" left="313" width="241" height="9" font="font4" id="p1_t34" reading_order_no="33" segment_no="2" tag_type="text">Note that at each suffix position i , since j only marks the</text>
<text top="103" left="313" width="241" height="12" font="font4" id="p1_t35" reading_order_no="34" segment_no="2" tag_type="text">first position in  i +1 that satisfies the gap constraints, we</text>
<text top="119" left="313" width="242" height="9" font="font4" id="p1_t36" reading_order_no="35" segment_no="2" tag_type="text">also need to consider all the subsequent positions j ' &gt; j</text>
<text top="132" left="313" width="190" height="9" font="font4" id="p1_t37" reading_order_no="36" segment_no="2" tag_type="text">that may satisfy the corresponding gap range.<i>i</i></text>
<text top="155" left="313" width="241" height="9" font="font4" id="p1_t38" reading_order_no="37" segment_no="4" tag_type="text">Consider the example shown in Fig. 3 to recover the full</text>
<text top="166" left="313" width="241" height="10" font="font4" id="p1_t39" reading_order_no="38" segment_no="4" tag_type="text">positions for  = CCG[0,3]TA[1,3]GAAC. Under each<i>j</i></text>
<text top="178" left="313" width="241" height="9" font="font4" id="p1_t40" reading_order_no="39" segment_no="4" tag_type="text">symbol we show two columns. The left column corre-</text>
<text top="190" left="313" width="241" height="9" font="font4" id="p1_t41" reading_order_no="40" segment_no="4" tag_type="text">sponds to the intermediate pos-lists as we proceed from</text>
<text top="202" left="313" width="241" height="9" font="font4" id="p1_t42" reading_order_no="41" segment_no="4" tag_type="text">right to left, whereas the right column stores the indices<i>f</i></text>
<text top="214" left="313" width="241" height="9" font="font4" id="p1_t43" reading_order_no="42" segment_no="4" tag_type="text">into the previous pos-list. For example, the middle col-</text>
<text top="225" left="313" width="241" height="10" font="font4" id="p1_t44" reading_order_no="43" segment_no="4" tag_type="text">umn gives the pos-list  ( TA [1,3] GAAC ) = { 1 , 1 , 4, 2 , 2 , 5,</text>
<text top="234" left="313" width="241" height="12" font="font4" id="p1_t45" reading_order_no="44" segment_no="4" tag_type="text">7, 3 , 1 , 1}. For each position x ∈  ( TA [l,3] GAAC ) (exclud-<i>i</i></text>
<text top="249" left="313" width="241" height="9" font="font4" id="p1_t46" reading_order_no="45" segment_no="4" tag_type="text">ing the sequence identifiers and the cardinality), the right</text>
<text top="260" left="313" width="241" height="10" font="font4" id="p1_t47" reading_order_no="46" segment_no="4" tag_type="text">column records an index in  ( GAAC ) which corresponds</text>
<text top="272" left="313" width="241" height="10" font="font4" id="p1_t48" reading_order_no="47" segment_no="4" tag_type="text">to the first position in  ( GAAC ) that satisfies the gap</text>
<text top="284" left="313" width="241" height="9" font="font4" id="p1_t49" reading_order_no="48" segment_no="4" tag_type="text">range with respect to x . For example, for position x = 5 (at</text>
<text top="295" left="313" width="241" height="10" font="font4" id="p1_t50" reading_order_no="49" segment_no="4" tag_type="text">index 6), the first position in  ( GAAC ) that satisfies the<i>i</i></text>
<text top="308" left="313" width="241" height="9" font="font4" id="p1_t51" reading_order_no="50" segment_no="4" tag_type="text">gap range [1,3] is 10 (since in this case there are 3 gaps</text>
<text top="319" left="313" width="241" height="9" font="font4" id="p1_t52" reading_order_no="51" segment_no="4" tag_type="text">between the end of TA at position 6 and start of GAAC at<i>j</i></text>
<text top="331" left="313" width="241" height="9" font="font4" id="p1_t53" reading_order_no="52" segment_no="4" tag_type="text">position 10), and it occurs at index 6. Likewise, for each</text>
<text top="343" left="313" width="241" height="9" font="font4" id="p1_t54" reading_order_no="53" segment_no="4" tag_type="text">position in the current pos-list we store which positions in</text>
<text top="355" left="313" width="241" height="9" font="font4" id="p1_t55" reading_order_no="54" segment_no="4" tag_type="text">the previous pos-list were extended. With this indexed<i>i</i></text>
<text top="366" left="313" width="241" height="9" font="font4" id="p1_t56" reading_order_no="55" segment_no="4" tag_type="text">information, full-position recovery becomes straightfor-</text>
<text top="378" left="313" width="241" height="9" font="font4" id="p1_t57" reading_order_no="56" segment_no="4" tag_type="text">ward. We begin with the start positions of the occurrences.</text>
<text top="390" left="313" width="241" height="9" font="font4" id="p1_t58" reading_order_no="57" segment_no="4" tag_type="text">We then keep following the indices from one pos-list to<i>f</i></text>
<text top="402" left="313" width="241" height="9" font="font4" id="p1_t59" reading_order_no="58" segment_no="4" tag_type="text">the next, until we reach the last pos-list. Since the index</text>
<text top="413" left="313" width="241" height="9" font="font4" id="p1_t60" reading_order_no="59" segment_no="4" tag_type="text">only marks the first position that satisfies the gap range,</text>
<text top="425" left="313" width="241" height="9" font="font4" id="p1_t61" reading_order_no="60" segment_no="4" tag_type="text">we still need to check if the following positions satisfy the<i>i</i></text>
<text top="437" left="313" width="241" height="9" font="font4" id="p1_t62" reading_order_no="61" segment_no="4" tag_type="text">gap range. At each stage in the full position recovery, we</text>
<text top="448" left="313" width="241" height="10" font="font4" id="p1_t63" reading_order_no="62" segment_no="4" tag_type="text">maintain a list of intermediate position prefixes  that<i>j</i></text>
<text top="460" left="313" width="241" height="10" font="font4" id="p1_t64" reading_order_no="63" segment_no="4" tag_type="text">match up to the j -th position in  . For example, to</text>
<text top="471" left="313" width="241" height="10" font="font4" id="p1_t65" reading_order_no="64" segment_no="4" tag_type="text">recover the full position for  = CCG[0,3]TA[1,3]GAAC,</text>
<text top="483" left="313" width="241" height="10" font="font4" id="p1_t66" reading_order_no="65" segment_no="4" tag_type="text">considering start position 1 (with  = {(1)}) in sequence</text>
<text top="496" left="313" width="241" height="9" font="font4" id="p1_t67" reading_order_no="66" segment_no="4" tag_type="text">2, we follow index 6 to get position 5 in the middle pos-<i>l</i></text>
<text top="507" left="313" width="241" height="10" font="font4" id="p1_t68" reading_order_no="67" segment_no="4" tag_type="text">list, to get  = {(1, 5)}. Since the next position after 5 is 7<i>i</i></text>
<text top="176" left="262" width="20" height="13" font="font5" id="p1_t69" reading_order_no="8" segment_no="3" tag_type="text"> </text>
<text top="501" left="273" width="17" height="13" font="font5" id="p1_t70" reading_order_no="31" segment_no="3" tag_type="text"> <i>u</i></text>
<text top="699" left="55" width="165" height="9" font="font12" id="p1_t71" reading_order_no="83" segment_no="7" tag_type="title">Indexed Full Position Recovery Algorithm<i>i</i></text>
<text top="699" left="55" width="37" height="9" font="font13" id="p1_t72" reading_order_no="82" segment_no="7" tag_type="title">Figure 2</text>
<text top="709" left="55" width="167" height="9" font="font14" id="p1_t73" reading_order_no="84" segment_no="8" tag_type="text">Indexed Full Position Recovery Algorithm.</text>
<text top="531" left="71" width="247" height="21" font="font15" id="p1_t74" reading_order_no="68" segment_no="6" tag_type="table">Full-Position-Recovery ( i, j, F, F )</text>
<text top="554" left="56" width="7" height="14" font="font19" id="p1_t75" reading_order_no="69" segment_no="6" tag_type="table">1</text>
<text top="550" left="71" width="124" height="21" font="font15" id="p1_t76" reading_order_no="70" segment_no="6" tag_type="table">if ( i &gt; |M| ) then</text>
<text top="571" left="56" width="7" height="14" font="font19" id="p1_t77" reading_order_no="71" segment_no="6" tag_type="table">2</text>
<text top="567" left="95" width="88" height="20" font="font16" id="p1_t78" reading_order_no="72" segment_no="6" tag_type="table">Add F to F ;</text>
<text top="589" left="57" width="88" height="20" font="font15" id="p1_t79" reading_order_no="73" segment_no="6" tag_type="table">3 foreach ( j</text>
<text top="589" left="155" width="392" height="20" font="font18" id="p1_t80" reading_order_no="74" segment_no="6" tag_type="table">∈ [ j, |P i | ] such that ( P i [ j ] − F [ i − 1] − 1 = d ) ∈ [ l i , u i ]) do</text>
<text top="611" left="57" width="7" height="14" font="font19" id="p1_t81" reading_order_no="75" segment_no="6" tag_type="table">4</text>
<text top="606" left="95" width="92" height="21" font="font17" id="p1_t82" reading_order_no="76" segment_no="6" tag_type="table">F [ i ] ← P i [ j ];<i>s </i></text>
<text top="629" left="57" width="7" height="14" font="font19" id="p1_t83" reading_order_no="77" segment_no="6" tag_type="table">5</text>
<text top="625" left="95" width="296" height="21" font="font16" id="p1_t84" reading_order_no="78" segment_no="6" tag_type="table">Full-Position-Recovery( i + 1, N i [ j ], F , F );</text>
<text top="648" left="58" width="109" height="21" font="font15" id="p1_t85" reading_order_no="79" segment_no="6" tag_type="table">6 if (i=2) then<i>S</i></text>
<text top="669" left="58" width="7" height="14" font="font19" id="p1_t86" reading_order_no="80" segment_no="6" tag_type="table">7</text>
<text top="664" left="95" width="71" height="20" font="font16" id="p1_t87" reading_order_no="81" segment_no="6" tag_type="table">Return F ;<i>s </i></text>
</page>
</pdf2xml>
